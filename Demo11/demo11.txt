Auteur : #ilyass.el.ouazzani@umontreal.ca

Dans cette première partie nous allons calculer l'approximation de pi avec 600 000 000 de termes suivant la formule suivante :
    -> pi = 4/1 - 4/3 + 4/5 - 4/7 + 4/9 - 4/11 + ...

1.1 Créez une classe ComputePi qui va nous permettre d'approximer la valeur de pi. Cette classe possède trois attributs :
    + int from : Terme de depart pour le calcul
    + int from : Terme de fin pour le calcul
    + double partialSum : va stocker l'approximation calculée

1.2 La classe ComputePi va avoir un constructeur qui prend le terme de départ et le terme de fin en paramètres.

1.3 Créez une méthode compute() qui va itérer du terme de départ au terme de fin et va calculer pi avec la formule suivante :
    -> pi += Math.pow(-1, i) * 4 / (2 * i + 1)
Cette ligne est l'implémentation de la formule présentée plus haut.
À la fin de l'itération, la somme doit être affectée à partialSum.

1.4 Dans un main créez deux instances de la classe ComputePi :
    + pi1 : qui calcul l'approximation de pi du terme 0 au terme 300 000 000
    + pi2 : qui calcul l'approximation de pi du terme 300 000 000 au terme 600 000 000

1.5 Créez deux instances de Runnable qui vont lancer la méthode compute() de pi1 et de pi2.

1.6 Créez deux Threads qui vont executer les deux Runnable de façon parallèle et lancez les Threads. N'oubliez pas d'attendre la fin des
Threads avec .join().

1.7 À la fin des deux Threads, affichez la somme (pi1.partialSum + pi2.partialSum).

1.8 Est ce que c'est plus rapide avec deux Threads ou avec un seul Thread ? Si on l'execute sur 10 Thread est ce que ce sera plus rapide ?


2.1 Créez la classe Concurrence qui incrémente la valeur de x. Cette classe possède un attribut static (int x) initialisé à zéro.

2.2 la classe Concurrence possède une méthode increment() qui incrémente la valeur de x.

2.3 Dans le main créez deux Threads qui vont lancer la méthode increment. démarrez les Threads et affichez la valeur de x par après.

2.4 Quelle est la valeur de x affichée ? Pourquoi ?

2.5 Maintenant attendre la fin des deux threads avant d'afficher la valeur de x.
